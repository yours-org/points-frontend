import {
	ByteString,
	DefaultProvider,
	MethodCallOptions,
	Sha256,
	SigHash,
	SmartContract,
	TestWallet,
	Utils,
	assert,
	bsv,
	byteString2Int,
	hash256,
	method,
	prop,
	reverseByteString,
	sha256,
	toByteString
} from 'scrypt-ts'


const DIFF = BigInt('0x000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF')
const PRIVATE_KEY = 'cPTgmLcnWAjtk4Y5Z8PjDSzwho4VsQDuzLeTLqcwgtEc8bQQzbMt'
const privateKey = bsv.PrivateKey.fromWIF(PRIVATE_KEY || '')
export const signer = new TestWallet(
	privateKey,
	new DefaultProvider({
		network: bsv.Networks.testnet
	})
)

export const deploy = async () => {
	await HashPoints.loadArtifact(HashPointsArtifact)
	const instance = new HashPoints(DIFF)
	await instance.connect(signer)
	const deployTx = await instance.deploy(1)
	localStorage.setItem('point-contract', deployTx.id)
	console.log(`HashPoints contract deployed: ${deployTx.id}`)
}

export const sync = async () => {
	await HashPoints.loadArtifact(HashPointsArtifact)
	await signer.connect()
	const tx = await signer.connectedProvider.getTransaction(localStorage.getItem('point-contract'))
	const instance = HashPoints.fromTx(tx, 0)
	await instance.connect(signer)
	return instance
}

export const mine = async (instance) => {
	const { mine: miner } = await import('@/lib/pkg')
	const solution = miner(localStorage.getItem('point-contract'), 6n, 10000);
	const res = await instance.methods.claim(toByteString(solution.nonce))
	const tx = (await res).tx
	localStorage.setItem('point-contract', tx.id)
	instance = HashPoints.fromTx(tx, 0)
	await instance.connect(signer)
	return instance
}

export class HashPoints extends SmartContract {
	@prop(true)
	points: bigint

	@prop()
	diff_1_target: bigint

	constructor(diff: bigint) {
		super(...arguments)
		this.points = 0n
		this.diff_1_target = diff
	}

	@method()
	public claim(nonce: ByteString) {
		const hash = hash256(this.ctx.utxo.outpoint.txid + nonce)
		const diff = this.diff_1_target / byteString2Int(reverseByteString(hash, 32n))
		assert(diff > 0n, 'minimum difficulty not met')
		this.points = this.points + diff
		const outputs = this.buildStateOutput(this.ctx.utxo.value) + this.buildChangeOutput()
		assert(this.ctx.hashOutputs == hash256(outputs), 'hashOutputs mismatch')
		console.log(`claim("${nonce}"): ${JSON.stringify({ points: this.points })}`)
	}

	@method()
	public redeem(amount: bigint, message: ByteString) {
		assert(amount > 0n, 'amount negative')
		assert(amount <= this.points, 'insufficient balance')
		this.points = this.points - amount
		assert(this.points > 0n, 'points overflow')
		const outputs = this.buildStateOutput(this.ctx.utxo.value) + this.buildChangeOutput()
		assert(this.ctx.hashOutputs == hash256(outputs), 'hashOutputs mismatch')
		console.log(`redeem(${amount} "${message}") ${JSON.stringify({ points: this.points })}`)
	}

	static async buildTxForClaim(
		current: HashPoints,
		options: MethodCallOptions<HashPoints>,
		nonce: ByteString
	) {
		const tx = new bsv.Transaction().addInput(current.buildContractInput())
		const txid = Buffer.from(current.utxo.txId, 'hex').reverse().toString('hex')
		const hash = hash256(txid + nonce)
		const diff = current.diff_1_target / BigInt(`0x${hash}`)
		const next = current.next()
		next.points = next.points + diff
		const stateOutput = Buffer.from(next.buildStateOutput(1n), 'hex')
		tx.addOutput(
			bsv.Transaction.Output.fromBufferReader(new bsv.encoding.BufferReader(stateOutput))
		)
		const defaultAddress = await current.signer.getDefaultAddress()
		tx.change(options.changeAddress || defaultAddress)

		return { tx, atInputIndex: 0, nexts: [] }
	}

	static async buildTxForRedeem(
		current: HashPoints,
		options: MethodCallOptions<HashPoints>,
		amount: bigint,
		message: ByteString
	) {
		const tx = new bsv.Transaction().addInput(current.buildContractInput())
		const next = current.next()
		next.points = next.points - amount
		const stateOutput = Buffer.from(next.buildStateOutput(1n), 'hex')
		tx.addOutput(
			bsv.Transaction.Output.fromBufferReader(new bsv.encoding.BufferReader(stateOutput))
		)
		const defaultAddress = await current.signer.getDefaultAddress()
		tx.change(options.changeAddress || defaultAddress)

		return { tx, atInputIndex: 0, nexts: [] }
	}
}

export const HashPointsArtifact = {
	version: 9,
	compilerVersion: '1.19.2+commit.c3a20a0',
	contract: 'HashPoints',
	md5: '065f099216f8b72de30d0c11adbd468c',
	structs: [
		{
			name: '__scrypt_ts_Change',
			params: [
				{
					name: 'amount',
					type: 'int'
				},
				{
					name: 'address',
					type: 'Ripemd160'
				}
			],
			genericTypes: []
		}
	],
	library: [],
	alias: [],
	abi: [
		{
			type: 'function',
			name: 'claim',
			index: 0,
			params: [
				{
					name: 'nonce',
					type: 'bytes'
				},
				{
					name: '__scrypt_ts_txPreimage',
					type: 'SigHashPreimage'
				},
				{
					name: '__scrypt_ts_changeAmount',
					type: 'int'
				},
				{
					name: '__scrypt_ts_changeAddress',
					type: 'Ripemd160'
				}
			]
		},
		{
			type: 'function',
			name: 'redeem',
			index: 1,
			params: [
				{
					name: 'amount',
					type: 'int'
				},
				{
					name: 'message',
					type: 'bytes'
				},
				{
					name: '__scrypt_ts_txPreimage',
					type: 'SigHashPreimage'
				},
				{
					name: '__scrypt_ts_changeAmount',
					type: 'int'
				},
				{
					name: '__scrypt_ts_changeAddress',
					type: 'Ripemd160'
				}
			]
		},
		{
			type: 'constructor',
			params: [
				{
					name: 'diff',
					type: 'int'
				}
			]
		}
	],
	stateProps: [
		{
			name: 'points',
			type: 'int'
		}
	],
	buildType: 'debug',
	file: 'file:///Users/brandon/proj/yours/hash-points/artifacts/hashPoints.scrypt',
	hex: '0176018801a901ac2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c000000000000000000<diff>',
	sourceMapFile: ''
}
